################################################################
# Copyright (c) 2007-2008 Allurent, Inc.
# http://code.google.com/p/antennae/
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################################

++++++++++++++++++++++++++++++++++++++++
+ Changes in 1.2.1
++++++++++++++++++++++++++++++++++++++++

Bug fixes
    The following issues logged against Antennae have been fixed:
    7: Test AIR Apps
    8: Building Antennae error

***** New Files

lib/RunAirTests*
    Application shell and descriptor used to create an AIR based
    FlexUnit application.

templates/SampleAIRTestApplication/*
    Template project for running AIR based FlexUnit tests.

***** Updated Files

lib/arc-flexunit.swc
src/arc-flexunit/*
    Facility added to call a function at the conclusion of all unit
    tests. Added to support exiting from an AIR based FlexUnit
    application.

lib/build-assets.xml
    Includes references to template files for creating AIR based
    FlexUnit applications.

tools/build-common-targets.xml
    Added new targets to support AIR based FlexUnit applications.

tools/build-common-tasks.xml
    Updated to allow library paths to include spaces.

***** New Targets (tools/build-common-targets.xml)

air-test-application-stage
    Stages an AIR based FlexUnit application for running. This is the
    test version of the air-application-stage target.

air-test-application
    Compiles an AIR based FlexUnit application. This automatically
    creates the TestSuite that the application will use. This is the
    AIR version of the flex-test-application target.
    
flex-test-app
    Creates the application MXML for a Flex based FlexUnit
    application. Tasks in this target were removed from
    create-test-suite in order to support AIR based FlexUnit
    applications. Called by the existing flex-test-application target.
    
air-test-app
    Creates the application MXML and application descriptor for an AIR
    based FlexUnit application.  Called by the new
    air-test-application target.
    
test-air-flexunit
    Runs an AIR based FlexUnit application, assumes application has
    already been built.

***** New Properties (lib/build-assets.xml)

arc-air-flexunit.mxml
    Template file used to create an AIR based FlexUnit application.

    Default: ${lib.assets.dir}/RunAirTests.mxml
    
arc-air-flexunit-app.xml
    Template file used to create the AIR descriptor for a FlexUnit
    application.

    Default: ${lib.assets.dir}/RunAirTests-app.xml

++++++++++++++++++++++++++++++++++++++++
+ Changes in 1.2.0
++++++++++++++++++++++++++++++++++++++++

New version numbering
    Antennae versions are now being released with a more traditional
    version numbering system of #.#.# which translates to
    major.minor.patch.
 
Bug fixes
    The following issues logged against Antennae have been fixed:
    2: Flex targets should be prefixed flex- instead of flex2-
    4: adt certificate usage syntax

Property and target renaming
    Antennae grew out of the build process used at Allurent.  As such
    it inherited some naming conventions that are not found outside of
    Allurent. To better align Antennae with standard naming
    conventions many properties and targets have been renamed.
    
    To minimize the impact on existing projects a backwards
    compatibility mode has been introduced. It is off by default.
    Antennae users are encouraged to update their projects to use the
    new naming conventions. Until those updates are completed the
    backwards compatibility mode will provide a stop-gap
    measure. Given the variability of situations that Antennae can be
    used in and the high degree to which it can be customized, the
    backwards compatibility mechanism has been designed to address the
    most common situations.
    
    The following name changes occurred:
    
    * All properties and targets that used flex2 in their name have
      been renamed to flex.

    * All properties, targets, package names, and files that used
      flexunit2 in their name have been renamed to flexunit.

    * All properties, package names, and files that used arc-flexunit2
      in their name have been renamed to arc-flexunit.

    * All properties and targets that used as3doc in their name have
      been renamed to asdoc.

    * The default of build.dir changed from build to bin.

    * The default of src.flex.dir changed from flex2 to src.

    * The default of src.java.dir changed from java to src.

    * The default of arc-flexunit.filters changed from
      flexunit2.filters to arc-flexunit.filters.

    * If you have code that references ARCTestRunner or
      AllTestsFileGenerator, it will need to be updated to reflect the
      new package name.
    
    Full details of the backwards compatibility mechanism and the
    renaming changes are detailed below.

Behavior changes
    The flex.dir property is no longer defaulted in
    build-common-properties.xml. This property is designed to be set
    in build-user.properties.

    A property named air.certificate.type has been added with a
    default value of pkcs12. This property is used by AIR when
    creating a signed .air file.

***** New Files

tools/compat-build.xml
    This provides a single file that can be imported to trigger the
    backwards compatibility settings. Notes on including this file can
    be found in tools/build-common-imports.xml.

***** Updated Files

build-user.properties.mac
    Updated to new property naming convention.

build-user.properties.win
    Updated to new property naming convention.

lib/build-assets.xml
    Properties and filenames updated to new naming convention.

tools/build-common-imports.xml
    Added facility to enable backwards compatibility mode. It is off
    by default.

tools/build-common-properties.xml
    Updated to new property naming convention. List of changes below.

tools/build-common-targets.xml
    Updated to new target naming convention and use new property
    naming convention. List of changes below.

tools/build-common-tasks.xml
    Updated to new task naming convention and use new property naming
    convention. List of changes below.
    
tutorial/** and templates/**
    All files have been updated to use the new naming convention.  Any
    notable changes are listed below.
    
templates/SampleAIRApplication/src/SampleAIRApplication-app.xml
    Updated to AIR 1.0 descriptor format.
    
src/**
    Updated directories to new naming convention.
    
***** Properties Renamed

In file lib/build-assets.xml:

flexunit2.swc -> flexunit.swc
arc-flexunit2.jar -> arc-flexunit.jar
arc-flexunit2.swc -> arc-flexunit.swc
arc-flexunit2.mxml -> arc-flexunit.mxml

In file tools/build-common-properties.xml:

project.flex2.application -> project.flex.application
flex2.dir -> flex.dir
flex2.frameworks.dir -> flex.frameworks.dir
flex2.config -> flex.config
flex2.dist.lib -> flex.dist.lib
flex2.compc.jar -> flex.compc.jar
flex2.mxmlc.jar -> flex.mxmlc.jar
flex2.mxmlc.options -> flex.mxmlc.options
flex2.compc.options -> flex.compc.options
src.flex2.dir -> src.flex.dir
flex2.standalone.player -> flex.standalone.player
as3doc.template.dir -> asdoc.template.dir
as3doc.jar -> asdoc.jar
as3doc.xalan.jar -> asdoc.xalan.jar
build.as3doc.dir -> build.asdoc.dir
arc-flexunit2.loglevel -> arc-flexunit.loglevel
arc-flexunit2.class -> arc-flexunit.class
arc-flexunit2.alltests.suite -> arc-flexunit.alltests.suite
arc-flexunit2.reportserver.port -> arc-flexunit.reportserver.port
arc-flexunit2.reportserver.host -> arc-flexunit.reportserver.host
arc-flexunit2.timeout -> arc-flexunit.timeout
arc-flexunit2.filters -> arc-flexunit.filters

***** Targets Renamed

In file tools/build-common-targets.xml:

flex2-application -> flex-application
flex2-application-copy -> flex-application-copy
flex2-application-check -> flex-application-check
flex2-library -> flex-library
flex2-library-check -> flex-library-check
as3doc -> asdoc
as3doc-check -> asdoc-check
flex2-test-application -> flex-test-application
test-flexunit2 -> test-flexunit
test-flexunit2-os -> test-flexunit-os
test-flexunit2-mac -> test-flexunit-mac
test-flexunit2-notmac -> test-flexunit-notmac
test-flexunit2-failure -> test-flexunit-failure

***** Tasks Renamed

In file tools/build-common-tasks.xml:

as3doc -> asdoc

***** Files Renamed

lib/arc-flexunit2.jar -> lib/arc-flexunit.jar
lib/arc-flexunit2.swc -> lib/arc-flexunit.swc
lib/flexunit2.swc -> lib/flexunit.swc

***** Directories Renamed

src/arc-flexunit2 -> src/arc-flexunit
src/arc-flexunit2/flex2 -> src/arc-flexunit/flex
src/arc-flexunit2/flex2/com/allurent/flexunit2 -> src/arc-flexunit/flex/com/allurent/flexunit
src/arc-flexunit2/java/com/allurent/flexunit2 -> src/arc-flexunit/java/com/allurent/flexunit
templates/**/flex2 -> templates/**/src
tutorial/**/flex2 -> tutorial/**/src

++++++++++++++++++++++++++++++++++++++++
+ Changes in 1.0001
++++++++++++++++++++++++++++++++++++++++

Flex based AIR application support
    New targets and tasks have been added to support the building,
    running, and packaging of Flex based AIR applications.

    A sample project has been put together that demonstrates the use
    of these new targets.

    A key concept used in AIR application support is the concept of an
    "assets" directory. Since the AIR ADT application packager
    requires you to specify each file that should be bundled into the
    application, Antennae has instead chosen to specify a single
    directory. The goal being that by default all files under "assets"
    will be packaged with the application and there is no need to
    include these files in the source tree.

Simplified importing
    All template applications have been updated to use the new single
    build-common-imports.xml file to pull in all standard Antennae
    build files.
    
Source code included
    The source code for the ARC-FlexUnit pieces are now bundled with
    Antennae. This is for reference purposes. To rebuild the platform
    please grab the latest source code from the SVN repository for
    Antennae. http://antennae.googlecode.com/svn/

Linux fixes
    Fixed bug about not being able to run automated unit tests on Linux. 
     
***** Updated Files

build-user.properties.mac
    Updated to include new required and optional AIR properties.

build-user.properties.win
    Updated to include new required and optional AIR properties.

templates/Sample*/build.xml
    Updated to reference new build-common-imports.xml file.

***** New Files

tools/build-common-imports.xml added
    This provides a single file that projects can import that will
    pickup all the other standard build-common-*.xml files.

templates/SampleAIRApplication
    Sample project that demonstrates using the new AIR targets
    (described below) to build and run a Flex based AIR application.

***** New Targets (tools/build-common-targets.xml)

air-application
    Compiles an AIR application based on a project.mxml and
    project-app.xml file existing the in source directory.
    
air-library
    Compiles source that use AIR APIs into a .swc for use by other
    AIR applications.
    
air-application-stage
    Copies the compiled application, descriptor, and assets
    directory into a stage directory for running or packaging.

air-package
    Creates a .air file using ADT based on the content of the stage
    directory. Includes certificate support.
    
air-launch
    Launch your AIR application from the stage directory using ADL. 

***** New Tasks (tools/build-common-tasks.xml)

adl
    Handles calling ADL with the needed arguments to run an AIR
    application.
    
adt
    Handles calling ADT with to package an AIR application.

***** New Properties (tools/build-common-properties.xml)

project.air
    Name of the .air file to produce when packaging an AIR
    application.

    Default: ${project.name}.air
    
project.air.desc
    Name of the AIR descriptor file that should be used for running
    and packaging the application.

    Default: ${project.name}-app.xml
    
air.config
    Location of the AIR specific configuration file used by the Flex
    compiler to build an AIR application.

    Default: ${flex2.frameworks.dir}/air-config.xml
    
air.adt.jar
    Location of the ADT jar that is used to package an AIR application.

    Default: ${flex2.dist.lib}/adt.jar
    
src.assets.dir
    Location of a directory that includes files that should be bundled
    with the AIR application.

    Default: assets

build.assets.dir
    Location that the contents of the assets directory are copied to
    when staging the AIR application.

    Default: ${build.stage.dir}/assets

air.adl
    Location of the ADL executable.

    Default: ${flex2.dir}/bin/adl.exe (windows) or ${flex2.dir}/bin/adl (mac) 

*** New unspecified properties:

air.certificate
    Required by air-package target

    Location of the certificate file to sign the AIR application with.

    No default, specify in build-user.properties
     
air.certificate.password

    Optional, will prompt if not specified

    Password associated with the certificate file

    No default, optionally specify in build-user.properties
